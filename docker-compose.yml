services:
  backend:
    container_name: backend
    depends_on:
      - postgres
#      - celery
#        condition: service_healthy
    build: .
    ports:
      - "8000:8000"
    command:
       python3 main.py
#      First launch
#      /bin/sh -c "sleep 1 &&
#      alembic revision --autogenerate -m "initial" &&
#      alembic upgrade head &&
#      python3 main.py"
    volumes:
      - media:/app/media
    networks:
      - default
  postgres:
    image: postgres:16.2-alpine3.19
    container_name: postgres
    ports:
      - "5432:5432"
    env_file:
      - .env
    command:
      - "postgres"
      - "-c"
      - "max_connections=10"
      - "-c"
      - "max_wal_size=2GB"
      - "-c"
      - "min_wal_size=512MB"
      - "-c"
      - "max_parallel_workers=2"
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - default
#    healthcheck:
#      test: [ "CMD-SHELL", "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}'" ]
#      interval: 5s
#      timeout: 2s
#      retries: 2
    restart: always
  redis:
    image: redis:7.2.4-alpine
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
#    volumes:
#      - redis_data:/root/redis
    env_file:
      - .env
#  celery:
#    container_name: celery
#    build: .
#    command:
#      celery -A api.teams.tasks:celery worker --loglevel=INFO
#    depends_on:
#      - redis
#  flower:
#    container_name: flower
#    build: .
#    command:
#      celery -A api.teams.tasks:celery flower
#    depends_on:
#      - celery
#    ports:
#      - "5555:5555"
volumes:
  media:
  pgdata:
#  redis_data:

networks:
  default:
    driver: bridge
#    name: network
